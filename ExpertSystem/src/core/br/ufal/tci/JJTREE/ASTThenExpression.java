/* Generated By:JJTree: Do not edit this line. ASTThenExpression.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package br.ufal.tci.JJTREE;

import br.ufal.tci.InferenceEngine.InferenceEngineIF;
import br.ufal.tci.exception.SemanticException;
import br.ufal.tci.expression.ThenExpression;
import br.ufal.tci.factor.ThenFactor;
import br.ufal.tci.logger.LoggerGenerator;
import br.ufal.tci.parser.Fact;

public class ASTThenExpression extends SimpleNode {
	public ASTThenExpression(int id) {
		super(id);
	}

	public ASTThenExpression(Parser_1 p, int id) {
		super(p, id);
	}

	/** Accept the visitor. **/
	public Object jjtAccept(Parser_1Visitor visitor, Object data,
			InferenceEngineIF engine) throws SemanticException {
		LoggerGenerator.debug("Visitando " + this.getClass().getCanonicalName());
		if (data instanceof Fact) {
			Fact fact = (Fact) data;
			ThenExpression thenExpression = new ThenExpression();
			thenExpression = (ThenExpression) visitor.visit(this,
					thenExpression, engine);

			fact.setExpression(thenExpression);

			return fact;

		} else if (data instanceof ThenExpression) {
			ThenExpression thenExpression = (ThenExpression) data;
			ThenExpression anotherExpression = new ThenExpression();
			anotherExpression = (ThenExpression) visitor.visit(this,
					anotherExpression, engine);

			thenExpression.setThenExpression(anotherExpression);

			return thenExpression;

		} else if (data instanceof ThenFactor) {
			ThenFactor factor = (ThenFactor) data;
			ThenExpression expression = new ThenExpression();
			expression = (ThenExpression) visitor.visit(this, expression,
					engine);

			factor.setThenExpression(expression);

			return factor;
		}

		return visitor.visit(this, data, engine);
	}
}
/*
 * JavaCC - OriginalChecksum=a5885eb238f46fc9725d8ddd40b9408d (do not edit this
 * line)
 */
