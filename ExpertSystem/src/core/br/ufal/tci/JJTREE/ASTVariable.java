/* Generated By:JJTree: Do not edit this line. ASTVariable.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package br.ufal.tci.JJTREE;

import br.ufal.tci.InferenceEngine.InferenceEngineIF;
import br.ufal.tci.exception.MissingElementException;
import br.ufal.tci.exception.SemanticException;
import br.ufal.tci.factor.IfFactor;
import br.ufal.tci.factor.ThenFactor;
import br.ufal.tci.logger.LoggerGenerator;
import br.ufal.tci.messages.MessageUtil;
import br.ufal.tci.parser.Constant;
import br.ufal.tci.parser.Identifier;
import br.ufal.tci.parser.SymbolTable;
import br.ufal.tci.parser.Variable;
import br.ufal.tci.type.BooleanType;
import br.ufal.tci.type.IntegerType;
import br.ufal.tci.type.RealType;
import br.ufal.tci.type.StringType;
import br.ufal.tci.value.Value;

public class ASTVariable extends SimpleNode {
	public ASTVariable(int id) {
		super(id);
	}

	public ASTVariable(Parser_1 p, int id) {
		super(p, id);
	}

	/** Accept the visitor. **/
	public Object jjtAccept(Parser_1Visitor visitor, Object data,
			InferenceEngineIF engine) throws SemanticException {
		LoggerGenerator
				.debug("Visitando " + this.getClass().getCanonicalName());
		if (data instanceof ThenFactor) {
			ThenFactor factor = (ThenFactor) data;
			Constant constant = new Constant();
			if (this.token.kind == Parser_1Constants.INTEGER_LITERAL) {
				constant.setType(new IntegerType());
				constant.setValue(new Value<Integer>(Integer
						.parseInt(this.name)));
			} else if (this.token.kind == Parser_1Constants.FLOATING_POINT_LITERAL) {
				constant.setType(new RealType());
				constant
						.setValue(new Value<Float>(Float.parseFloat(this.name)));
			} else if (this.token.kind == Parser_1Constants.STRING_LITERAL) {
				constant.setType(new StringType());
				constant.setValue(new Value<String>(this.name));
			} else if (this.token.kind == Parser_1Constants.TRUE) {
				constant.setType(new BooleanType());
				constant.setValue(new Value<Boolean>(true));
			} else if (this.token.kind == Parser_1Constants.FALSE) {
				constant.setType(new BooleanType());
				constant.setValue(new Value<Boolean>(false));
			}
			factor.setConstant(constant);
			return factor;

		} else if (data instanceof IfFactor) {

			IfFactor factor = (IfFactor) data;
			Variable variable = null;

			try {
				variable = SymbolTable.getInstance().lookup(this.name, engine);
				if (variable == null) {
					throw new SemanticException(
							MessageUtil.VARIABLE_NOT_DECLARED);
				}
			} catch (MissingElementException e) {
				throw new SemanticException(MessageUtil.VARIABLE_NOT_DECLARED);
			}

			variable.setIdentifier(new Identifier(this.name));
			/*
			 * LoggerGenerator.debug("Tipo: "+this.name);
			 * LoggerGenerator.debug(Parser_1Constants.INTEGER_LITERAL);
			 * LoggerGenerator.debug(Parser_1Constants.FLOATING_POINT_LITERAL);
			 * LoggerGenerator.debug(Parser_1Constants.STRING_LITERAL);
			 * LoggerGenerator.debug(Parser_1Constants.TRUE);
			 * LoggerGenerator.debug(Parser_1Constants.FALSE);
			 * 
			 * if(this.token.kind==Parser_1Constants.INTEGER_LITERAL){
			 * variable.setType(new IntegerType()); variable.setValue(new
			 * IntegerValue(Integer.parseInt(this.name))); } else
			 * if(this.token.kind==Parser_1Constants.FLOATING_POINT_LITERAL){
			 * variable.setType(new RealType()); variable.setValue(new
			 * RealValue(Float.parseFloat(this.name))); } else
			 * if(this.token.kind==Parser_1Constants.STRING_LITERAL){
			 * variable.setType(new StringType()); variable.setValue(new
			 * StringValue(this.name)); } else
			 * if(this.token.kind==Parser_1Constants.TRUE){ variable.setType(new
			 * BooleanType()); variable.setValue(new Value<Boolean>(true)); } else
			 * if(this.token.kind==Parser_1Constants.FALSE){
			 * variable.setType(new BooleanType()); variable.setValue(new
			 * BooleanValue(false)); }
			 */

			factor.setVariable(variable);
			return factor;
		}

		return visitor.visit(this, data, engine);
	}
}
/*
 * JavaCC - OriginalChecksum=23ca38098ff38e5d103cdd60d46a685b (do not edit this
 * line)
 */
