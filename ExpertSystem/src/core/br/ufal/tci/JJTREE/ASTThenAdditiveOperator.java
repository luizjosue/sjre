/* Generated By:JJTree: Do not edit this line. ASTThenAdditiveOperator.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package br.ufal.tci.JJTREE;

import br.ufal.tci.InferenceEngine.InferenceEngine;
import br.ufal.tci.exception.SemanticException;
import br.ufal.tci.expression.ThenMoreSimpleExpression;
import br.ufal.tci.expression.ThenSimpleExpression;
import br.ufal.tci.logger.LoggerGenerator;
import br.ufal.tci.operator.additive.AdditiveOperator;
import br.ufal.tci.operator.additive.Minus;
import br.ufal.tci.operator.additive.Or;
import br.ufal.tci.operator.additive.Plus;

public class ASTThenAdditiveOperator extends SimpleNode {
	public ASTThenAdditiveOperator(int id) {
		super(id);
	}

	public ASTThenAdditiveOperator(Parser_1 p, int id) {
		super(p, id);
	}

	/** Accept the visitor. **/
	public Object jjtAccept(Parser_1Visitor visitor, Object data,
			InferenceEngine engine) throws SemanticException {
		LoggerGenerator.debug("Visitando " + this.getClass().getCanonicalName());
		if (data instanceof ThenSimpleExpression) { // se for
			// ThenSimpleExpression

			ThenSimpleExpression expression = (ThenSimpleExpression) data;

			AdditiveOperator operator = null;

			if (this.name.equalsIgnoreCase("-")) {
				operator = new Minus();
			} else if (this.name.equalsIgnoreCase("+")) {
				operator = new Plus();
			} else if (this.name.equalsIgnoreCase("or")) {
				operator = new Or();
			}

			expression.setOperator(operator);

			return expression;

		} else if (data instanceof ThenMoreSimpleExpression) { // se for
			// ThenMoreSimpleExpression

			ThenMoreSimpleExpression expression = (ThenMoreSimpleExpression) data;
			AdditiveOperator operator = null;

			if (this.name.equalsIgnoreCase("-")) {
				operator = new Minus();
			} else if (this.name.equalsIgnoreCase("+")) {
				operator = new Plus();
			} else if (this.name.equalsIgnoreCase("or")) {
				operator = new Or();
			}

			expression.setOperator(operator);

			return expression;
		}

		return visitor.visit(this, data, engine);
	}
}
/*
 * JavaCC - OriginalChecksum=c6f63efd335157a1147681bc80242816 (do not edit this
 * line)
 */
