/* Generated By:JJTree: Do not edit this line. ASTID.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package br.ufal.tci.JJTREE;

import br.ufal.tci.InferenceEngine.InferenceEngineIF;
import br.ufal.tci.exception.MissingElementException;
import br.ufal.tci.exception.SemanticException;
import br.ufal.tci.logger.LoggerGenerator;
import br.ufal.tci.messages.MessageUtil;
import br.ufal.tci.parser.Argument;
import br.ufal.tci.parser.Fact;
import br.ufal.tci.parser.Identifier;
import br.ufal.tci.parser.ObjectInstance;
import br.ufal.tci.parser.VariableList;
import br.ufal.tci.tmp.IfLocalAttribution;
import br.ufal.tci.util.StringUtil;

public class ASTID extends SimpleNode {

	public ASTID(int id) {
		super(id);
	}

	public ASTID(Parser_1 p, int id) {
		super(p, id);
	}

	/** Accept the visitor. **/
	public Object jjtAccept(Parser_1Visitor visitor, Object data,
			InferenceEngineIF engine) throws SemanticException {
		LoggerGenerator
				.debug("Visitando " + this.getClass().getCanonicalName());
		try {
			if (data instanceof VariableList) {
				VariableList variableList = (VariableList) data;
				Identifier identifier = new Identifier(this.name);
				try {
					variableList.addElement(identifier, engine);
				} catch (MissingElementException e) {
					if (!StringUtil.isEmpty(e.getMessage())
							&& e.getMessage().endsWith(
									MessageUtil.VARIABLE_NOT_DECLARED)) {
						// ignora pois esta na declaracao de variaveis
						variableList.addElementSkipValidation(identifier,
								engine);
					} else {
						throw e;
					}
				}
				return variableList;
			} else if (data instanceof Fact) {
				Fact fact = (Fact) data;
				fact.setIdentifier(new Identifier(this.name), engine);
				return fact;
			} else if (data instanceof IfLocalAttribution) {
				IfLocalAttribution attribution = (IfLocalAttribution) data;
				Identifier identifier = new Identifier(this.name);
				attribution.setIdentifier(identifier, engine);
				return attribution;
			} else if (data instanceof ObjectInstance) {
				ObjectInstance instance = (ObjectInstance) data;
				instance.addPackageAndName(new Identifier(this.name));
				return instance;
			} else if (data instanceof Argument) {
				Argument argument = (Argument) data;
				argument.addIdentifier(new Identifier(this.name));
				LoggerGenerator.debug(argument.getIdentifiers().iterator()
						.next());
				return argument;
			}
		} catch (MissingElementException e) {
			throw new SemanticException(e.getMessage());
		}

		return visitor.visit(this, data, engine);
	}
}
/*
 * JavaCC - OriginalChecksum=82aef8ccd9b488030359723e5447a055 (do not edit this
 * line)
 */
