/* Generated By:JJTree: Do not edit this line. ASTIfTerm.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package br.ufal.tci.JJTREE;

import br.ufal.tci.InferenceEngine.InferenceEngineIF;
import br.ufal.tci.exception.SemanticException;
import br.ufal.tci.expression.IfMoreSimpleExpression;
import br.ufal.tci.expression.IfSimpleExpression;
import br.ufal.tci.logger.LoggerGenerator;
import br.ufal.tci.term.IfTerm;

public class ASTIfTerm extends SimpleNode {
	public ASTIfTerm(int id) {
		super(id);
	}

	public ASTIfTerm(Parser_1 p, int id) {
		super(p, id);
	}

	/** Accept the visitor. **/
	public Object jjtAccept(Parser_1Visitor visitor, Object data,
			InferenceEngineIF engine) throws SemanticException {
		LoggerGenerator.debug("Visitando " + this.getClass().getCanonicalName());
		if (data instanceof IfSimpleExpression) {
			IfSimpleExpression simpleExpression = (IfSimpleExpression) data;
			IfTerm term = new IfTerm();
			term = (IfTerm) visitor.visit(this, term, engine);

			simpleExpression.setTerm(term);

			return simpleExpression;

		} else if (data instanceof IfMoreSimpleExpression) {
			IfMoreSimpleExpression expression = (IfMoreSimpleExpression) data;
			IfTerm term = new IfTerm();
			term = (IfTerm) visitor.visit(this, term, engine);

			expression.setTerm(term);

			return expression;
		}

		return visitor.visit(this, data, engine);
	}
}
/*
 * JavaCC - OriginalChecksum=dfacf659640d2bd0af2458bb2b816edf (do not edit this
 * line)
 */
