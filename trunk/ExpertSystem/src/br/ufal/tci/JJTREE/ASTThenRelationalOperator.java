/* Generated By:JJTree: Do not edit this line. ASTThenRelationalOperator.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package br.ufal.tci.JJTREE;

import br.ufal.tci.InferenceEngine.InferenceEngineIF;
import br.ufal.tci.exception.SemanticException;
import br.ufal.tci.expression.ThenExpression;
import br.ufal.tci.logger.LoggerGenerator;
import br.ufal.tci.operator.relational.DifferentRelationalOperator;
import br.ufal.tci.operator.relational.EqualRelationalOperator;
import br.ufal.tci.operator.relational.GreaterOrEqualRelationalOperator;
import br.ufal.tci.operator.relational.GreaterThanRelationalOperator;
import br.ufal.tci.operator.relational.LessOrEqualRelationalOperator;
import br.ufal.tci.operator.relational.LessThanRelationalOperator;
import br.ufal.tci.operator.relational.Operators;
import br.ufal.tci.operator.relational.RelationalOperator;
import br.ufal.tci.parser.Fact;

public class ASTThenRelationalOperator extends SimpleNode {
	public ASTThenRelationalOperator(int id) {
		super(id);
	}

	public ASTThenRelationalOperator(Parser_1 p, int id) {
		super(p, id);
	}

	/** Accept the visitor. **/
	public Object jjtAccept(Parser_1Visitor visitor, Object data,
			InferenceEngineIF engine) throws SemanticException {
		LoggerGenerator.debug("Visitando " + this.getClass().getCanonicalName());
		/* Se for Fact */
		if (data instanceof Fact) {
			Fact fact = (Fact) data;
			fact.setRelationalOperator(getOperator());
			return fact;
		}

		/* se for ThenExpression */
		if (data instanceof ThenExpression) {
			ThenExpression thenExpression = (ThenExpression) data;
			thenExpression.setOperator(getOperator());
			return thenExpression;
		}

		return visitor.visit(this, data, engine);
	}

	private RelationalOperator getOperator() {
		RelationalOperator relationalOperator = null;
		if (this.name.equals(Operators.EQUALS)) {
			relationalOperator = new EqualRelationalOperator();
		} else if (this.name.equals(Operators.LESS_THAN)) {
			relationalOperator = new LessThanRelationalOperator();
		} else if (this.name.equals(Operators.GREATER_THAN)) {
			relationalOperator = new GreaterThanRelationalOperator();
		} else if (this.name.equals(Operators.LESS_OR_EQUAL_THAN)) {
			relationalOperator = new LessOrEqualRelationalOperator();
		} else if (this.name.equals(Operators.GREATER_OR_EQUAL_THAN)) {
			relationalOperator = new GreaterOrEqualRelationalOperator();
		} else if (this.name.equals(Operators.DIFFERENCE)) {
			relationalOperator = new DifferentRelationalOperator();
		}
		return relationalOperator;
	}
}
/*
 * JavaCC - OriginalChecksum=cedaf7e50d64d437c86c540db5c6245e (do not edit this
 * line)
 */
