/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. teste.jj */
/*@egen*/options{
	IGNORE_CASE = true;
	           
  	             
  	                       
}

PARSER_BEGIN( Parser_1 )
package br.ufal.tci.JJTREE;
public class Parser_1/*@bgen(jjtree)*/implements Parser_1TreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTParser_1State jjtree = new JJTParser_1State();

/*@egen*/}
PARSER_END( Parser_1 )

SKIP  : {   " " 
			| "\t" 
			| "\n" 
			| "\r"
			|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
			|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/"> }

TOKEN: {
		<VARIABLE: "variable">|
		<FACT: "fact">|
		<RULE: "rule">
}

TOKEN: {
		<NOT: "not">
		| <TRUE: "true">
		| <FALSE: "false">
}

TOKEN: {
		<STRING:  "string">
		| <REAL: "real">
		| <INT: "int">
		| <BOOLEAN: "boolean">
		| <OBJECT: "object">
}

TOKEN: {
		<IF_TOKEN: "if">
		| <THEN_TOKEN: "then">
}

TOKEN: {
		<OR: "or">
		| <AND: "and">
		| <NEW: "new">
}

TOKEN: {
		<INTEGER_LITERAL: <DIGIT>(<DIGIT>)*>
		| <FLOATING_POINT_LITERAL: <DIGIT>(<DIGIT>)* | ((<DIGIT>(<DIGIT>)*) + "." (<DIGIT>(<DIGIT>)*))>
		| <CHARACTER_LITERAL: "\'" <LETTER> | <DIGIT> | <ALL_CHARACTERS> "\'">
		| <STRING_LITERAL: "\"" (<LETTER>|<DIGIT>|<ALL_CHARACTERS>)* "\"">
		| <IDENTIFIER: <LETTER>(<ALPHA_NUMERIC>|"_")*>
		| <#ALPHA_NUMERIC: <LETTER>|<DIGIT>>
		| <#LETTER: ["A"-"Z"]|["a"-"z"]>
		| <#DIGIT: ["0"-"9"]>
		| <#SPECIAL_CHARACTER: ["\n","\r"]>
		| <#ALL_CHARACTERS: (~["\"","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))>
}

SimpleNode Root()       : {/*@bgen(jjtree) Root */
  ASTRoot jjtn000 = new ASTRoot(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Root */
  try {
/*@egen*/ Program()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ASTStart Start()        : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Program()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ObjectInstanciation()                      : {/*@bgen(jjtree) ObjectInstanciation */
  ASTObjectInstanciation jjtn000 = new ASTObjectInstanciation(JJTOBJECTINSTANCIATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ObjectInstanciation */
        try {
/*@egen*/
	Identifier()"="<NEW>Identifier()(("."Identifier())*)"("ArgumentList()")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Token Identifier()     : {/*@bgen(jjtree) ID */
                          ASTID jjtn000 = new ASTID(JJTID);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ID */
  try {
/*@egen*/
  t=<IDENTIFIER>
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return t;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Interval()           : {/*@bgen(jjtree) Interval */
  ASTInterval jjtn000 = new ASTInterval(JJTINTERVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Interval */
        try {
/*@egen*/
	Identifier()"="((("<" | ">" | "<=" | ">=" | "!=") ThenExpression() ) | (("["|"]")ListOfNumbers()("["|"]")))/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ListOfNumbers()                : {/*@bgen(jjtree) ListOfNumbers */
  ASTListOfNumbers jjtn000 = new ASTListOfNumbers(JJTLISTOFNUMBERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ListOfNumbers */
        try {
/*@egen*/
	(<INTEGER_LITERAL>|<FLOATING_POINT_LITERAL>)".."(<INTEGER_LITERAL>|<FLOATING_POINT_LITERAL>)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArgumentList()               : {/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
        try {
/*@egen*/
	[Argument()(","Argument())*]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Token Integer()          : {/*@bgen(jjtree) Integer */
                            ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Integer */
        try {
/*@egen*/
	t = <INTEGER_LITERAL>
	{
		jjtn000.setToken(t);
	}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return t;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Token FloatPoint()             : {/*@bgen(jjtree) FloatPoint */
                                  ASTFloatPoint jjtn000 = new ASTFloatPoint(JJTFLOATPOINT);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) FloatPoint */
        try {
/*@egen*/
	t = <FLOATING_POINT_LITERAL>
	{
		jjtn000.setToken(t);
	}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return t;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


Token CharacterLiteral()                   : {/*@bgen(jjtree) CharacterLiteral */
                                              ASTCharacterLiteral jjtn000 = new ASTCharacterLiteral(JJTCHARACTERLITERAL);
                                              boolean jjtc000 = true;
                                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) CharacterLiteral */
        try {
/*@egen*/
	t = <CHARACTER_LITERAL>
	{
		jjtn000.setToken(t);
	}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return t;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Token StringLiteral()                : {/*@bgen(jjtree) StringLiteral */
                                        ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) StringLiteral */
        try {
/*@egen*/
	t = <STRING_LITERAL>
	{
		jjtn000.setToken(t);
	}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return t;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Argument()           : {/*@bgen(jjtree) Argument */
                             ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t=null;}
{/*@bgen(jjtree) Argument */
        try {
/*@egen*/
	(t=Integer()) | (t=FloatPoint()) | (t=CharacterLiteral()) | (t=StringLiteral()) | (Identifier()["."Identifier()["("ArgumentList()")"]])/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setToken(t);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VariableDeclaration()                      : {/*@bgen(jjtree) VariableDeclaration */
  ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableDeclaration */
        try {
/*@egen*/
	<VARIABLE>":"
	VariableList()
	(VariableList())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VariableList()               : {/*@bgen(jjtree) VariableList */
  ASTVariableList jjtn000 = new ASTVariableList(JJTVARIABLELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableList */
        try {
/*@egen*/
	Type()":"Identifier()(LOOKAHEAD(2)","Identifier())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Type()       : {/*@bgen(jjtree) Type */
                     ASTType jjtn000 = new ASTType(JJTTYPE);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Type */
        try {
/*@egen*/
	((t = <STRING>) | (t = <REAL>) | (t = <INT>) | (t = <BOOLEAN>) | (t = <OBJECT>))/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
	  jjtn000.setName(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void Constant()           : {/*@bgen(jjtree) Constant */
                             ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Constant */
        try {
/*@egen*/
	((t = <INTEGER_LITERAL>)  | (t = <FLOATING_POINT_LITERAL>)  | (t = <STRING_LITERAL>) | (t = <TRUE>)  | (t = <FALSE>))/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
	  jjtn000.setName(t.image);
	  jjtn000.setToken(t);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void Variable()           : {/*@bgen(jjtree) Variable */
                             ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Variable */
        try {
/*@egen*/
	(t = Identifier())/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  jjtn000.setName(t.image);
	  jjtn000.setToken(t);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfRelationalOperator()                       : {/*@bgen(jjtree) IfRelationalOperator */
                                                     ASTIfRelationalOperator jjtn000 = new ASTIfRelationalOperator(JJTIFRELATIONALOPERATOR);
                                                     boolean jjtc000 = true;
                                                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) IfRelationalOperator */
        try {
/*@egen*/

	((t = "=") | (t = "<") | (t = ">") | (t = "<=") | (t = ">=") | (t = "!="))/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
	  jjtn000.setName(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfExpression()               : {/*@bgen(jjtree) IfExpression */
  ASTIfExpression jjtn000 = new ASTIfExpression(JJTIFEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfExpression */
        try {
/*@egen*/
	(IfSimpleExpression()[LOOKAHEAD(2)(IfRelationalOperator())IfExpression()])/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfSimpleExpression()                     : {/*@bgen(jjtree) IfSimpleExpression */
  ASTIfSimpleExpression jjtn000 = new ASTIfSimpleExpression(JJTIFSIMPLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfSimpleExpression */
        try {
/*@egen*/
	(IfTerm()IfMoreSimpleExpression()) | (IfAdditiveOperator()IfTerm()IfMoreSimpleExpression())/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfAdditiveOperator()                     : {/*@bgen(jjtree) IfAdditiveOperator */
                                                 ASTIfAdditiveOperator jjtn000 = new ASTIfAdditiveOperator(JJTIFADDITIVEOPERATOR);
                                                 boolean jjtc000 = true;
                                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) IfAdditiveOperator */
        try {
/*@egen*/

	((t = "+") | (t = "-") | (t = <OR>))/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
	  jjtn000.setName(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfMoreSimpleExpression()                         : {/*@bgen(jjtree) IfMoreSimpleExpression */
  ASTIfMoreSimpleExpression jjtn000 = new ASTIfMoreSimpleExpression(JJTIFMORESIMPLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfMoreSimpleExpression */
        try {
/*@egen*/
	[LOOKAHEAD(2)(IfAdditiveOperator())IfTerm()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfTerm()         : {/*@bgen(jjtree) IfTerm */
  ASTIfTerm jjtn000 = new ASTIfTerm(JJTIFTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfTerm */
        try {
/*@egen*/
	IfFactor()IfMoreTerms()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MultiplicativeOperator()                         : {/*@bgen(jjtree) MultiplicativeOperator */
                                                         ASTMultiplicativeOperator jjtn000 = new ASTMultiplicativeOperator(JJTMULTIPLICATIVEOPERATOR);
                                                         boolean jjtc000 = true;
                                                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) MultiplicativeOperator */
        try {
/*@egen*/

	((t = "*") | (t = "/") | (t = <AND>))/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
	  jjtn000.setName(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfMoreTerms()              : {/*@bgen(jjtree) IfMoreTerms */
  ASTIfMoreTerms jjtn000 = new ASTIfMoreTerms(JJTIFMORETERMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfMoreTerms */
        try {
/*@egen*/
	[LOOKAHEAD(3)(MultiplicativeOperator())IfFactor()IfMoreTerms()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfLocalDeclaration()                     : {/*@bgen(jjtree) IfLocalDeclaration */
  ASTIfLocalDeclaration jjtn000 = new ASTIfLocalDeclaration(JJTIFLOCALDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfLocalDeclaration */
        try {
/*@egen*/
	IfLocalAttribution()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfLocalAttribution()                     : {/*@bgen(jjtree) IfLocalAttribution */
  ASTIfLocalAttribution jjtn000 = new ASTIfLocalAttribution(JJTIFLOCALATTRIBUTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfLocalAttribution */
        try {
/*@egen*/
	Identifier()IfLocalAttributionOperator()IfExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfLocalAttributionOperator()                             : {/*@bgen(jjtree) IfLocalAttributionOperator */
                                                                 ASTIfLocalAttributionOperator jjtn000 = new ASTIfLocalAttributionOperator(JJTIFLOCALATTRIBUTIONOPERATOR);
                                                                 boolean jjtc000 = true;
                                                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) IfLocalAttributionOperator */
        try {
/*@egen*/
	(t = ":=")/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
	  jjtn000.setName(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void IfFactor()           : {/*@bgen(jjtree) IfFactor */
  ASTIfFactor jjtn000 = new ASTIfFactor(JJTIFFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfFactor */
        try {
/*@egen*/
	LOOKAHEAD(2)IfLocalDeclaration() | Constant() | Variable() | <NOT> IfFactor() | ("("IfExpression()")")/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ThenRelationalOperator()                         : {/*@bgen(jjtree) ThenRelationalOperator */
                                                         ASTThenRelationalOperator jjtn000 = new ASTThenRelationalOperator(JJTTHENRELATIONALOPERATOR);
                                                         boolean jjtc000 = true;
                                                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ThenRelationalOperator */
        try {
/*@egen*/

	((t = "=") | (t = "<") | (t = ">") | (t = "<=") | (t = ">=") | (t = "!="))/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
	  jjtn000.setName(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ThenExpression()                 : {/*@bgen(jjtree) ThenExpression */
  ASTThenExpression jjtn000 = new ASTThenExpression(JJTTHENEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ThenExpression */
        try {
/*@egen*/
	(ThenSimpleExpression()[LOOKAHEAD(2)(ThenRelationalOperator())ThenExpression()])/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void ThenAdditiveOperator()                       : {/*@bgen(jjtree) ThenAdditiveOperator */
                                                     ASTThenAdditiveOperator jjtn000 = new ASTThenAdditiveOperator(JJTTHENADDITIVEOPERATOR);
                                                     boolean jjtc000 = true;
                                                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ThenAdditiveOperator */
        try {
/*@egen*/

	((t = "+") | (t = "-") | (t = <OR>))/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
	  jjtn000.setName(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ThenSimpleExpression()                       : {/*@bgen(jjtree) ThenSimpleExpression */
  ASTThenSimpleExpression jjtn000 = new ASTThenSimpleExpression(JJTTHENSIMPLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ThenSimpleExpression */
        try {
/*@egen*/
	((ThenTerm()ThenMoreSimpleExpression()) | ((ThenAdditiveOperator())ThenTerm()ThenMoreSimpleExpression()))/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ThenMoreSimpleExpression()                           : {/*@bgen(jjtree) ThenMoreSimpleExpression */
  ASTThenMoreSimpleExpression jjtn000 = new ASTThenMoreSimpleExpression(JJTTHENMORESIMPLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ThenMoreSimpleExpression */
        try {
/*@egen*/
	[(ThenAdditiveOperator())ThenTerm()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ThenTerm()           : {/*@bgen(jjtree) ThenTerm */
  ASTThenTerm jjtn000 = new ASTThenTerm(JJTTHENTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ThenTerm */
        try {
/*@egen*/
	ThenFactor()ThenMoreTerms()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void ThenMultiplicativeOperator()                             : {/*@bgen(jjtree) ThenMultiplicativeOperator */
                                                                 ASTThenMultiplicativeOperator jjtn000 = new ASTThenMultiplicativeOperator(JJTTHENMULTIPLICATIVEOPERATOR);
                                                                 boolean jjtc000 = true;
                                                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ThenMultiplicativeOperator */
        try {
/*@egen*/

	((t = "*") | (t = "/") | (t = <AND>))/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
	  jjtn000.setName(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ThenMoreTerms()                : {/*@bgen(jjtree) ThenMoreTerms */
  ASTThenMoreTerms jjtn000 = new ASTThenMoreTerms(JJTTHENMORETERMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ThenMoreTerms */
        try {
/*@egen*/
	[(ThenMultiplicativeOperator())ThenFactor()ThenMoreTerms()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ThenFactor()             : {/*@bgen(jjtree) ThenFactor */
  ASTThenFactor jjtn000 = new ASTThenFactor(JJTTHENFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ThenFactor */
        try {
/*@egen*/
	Constant() | Variable() | (<NOT> ThenFactor()) | ("("ThenExpression()")")/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void RuleDeclaration()                  : {/*@bgen(jjtree) RuleDeclaration */
  ASTRuleDeclaration jjtn000 = new ASTRuleDeclaration(JJTRULEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RuleDeclaration */
        try {
/*@egen*/
	<RULE>":"
	ListOfRules()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ListOfRules()              : {/*@bgen(jjtree) ListOfRules */
  ASTListOfRules jjtn000 = new ASTListOfRules(JJTLISTOFRULES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ListOfRules */
        try {
/*@egen*/
	(Rule())+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Rule()       : {/*@bgen(jjtree) Rule */
  ASTRule jjtn000 = new ASTRule(JJTRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Rule */
        try {
/*@egen*/
	DecisionStatement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DecisionStatement()                    : {/*@bgen(jjtree) DecisionStatement */
  ASTDecisionStatement jjtn000 = new ASTDecisionStatement(JJTDECISIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DecisionStatement */
        try {
/*@egen*/
	Body()
	Head()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Body()       : {/*@bgen(jjtree) Body */
  ASTBody jjtn000 = new ASTBody(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Body */
        try {
/*@egen*/
	<IF_TOKEN> IfExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Head()       : {/*@bgen(jjtree) Head */
  ASTHead jjtn000 = new ASTHead(JJTHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Head */
        try {
/*@egen*/
	<THEN_TOKEN>ConclusionList()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ConclusionList()                 : {/*@bgen(jjtree) ConclusionList */
  ASTConclusionList jjtn000 = new ASTConclusionList(JJTCONCLUSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConclusionList */
        try {
/*@egen*/
	Conclusion()(LOOKAHEAD(2)","Conclusion())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Conclusion()             : {/*@bgen(jjtree) Conclusion */
  ASTConclusion jjtn000 = new ASTConclusion(JJTCONCLUSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Conclusion */
        try {
/*@egen*/
	ThenAttribution()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FactDeclaration()                  : {/*@bgen(jjtree) FactDeclaration */
  ASTFactDeclaration jjtn000 = new ASTFactDeclaration(JJTFACTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FactDeclaration */
        try {
/*@egen*/
	<FACT>":"
		ListOfFacts()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ListOfFacts()              : {/*@bgen(jjtree) ListOfFacts */
  ASTListOfFacts jjtn000 = new ASTListOfFacts(JJTLISTOFFACTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ListOfFacts */
        try {
/*@egen*/
	Fact()
	[ListOfFacts()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Fact()       : {/*@bgen(jjtree) Fact */
  ASTFact jjtn000 = new ASTFact(JJTFACT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Fact */
        try {
/*@egen*/
	LOOKAHEAD(3)ObjectInstanciation() | Identifier()ThenRelationalOperator()ThenExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void ThenInclusiveOperator()                        : {/*@bgen(jjtree) ThenInclusiveOperator */
                                                       ASTThenInclusiveOperator jjtn000 = new ASTThenInclusiveOperator(JJTTHENINCLUSIVEOPERATOR);
                                                       boolean jjtc000 = true;
                                                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ThenInclusiveOperator */
        try {
/*@egen*/

	((t = "+=") | (t = "+=<") | (t = "+=!=") | (t = "+=<=") | (t = "+=>="))/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
	  jjtn000.setName(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ThenAttribution()                  : {/*@bgen(jjtree) ThenAttribution */
                                           ASTThenAttribution jjtn000 = new ASTThenAttribution(JJTTHENATTRIBUTION);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ThenAttribution */
        try {
/*@egen*/
	( LOOKAHEAD(2)((t = Identifier())"="){jjtn000.addIdentifier(t.image);jjtn000.setAttribution(true);}
	   | (LOOKAHEAD(2)((t = Identifier()){jjtn000.addIdentifier(t.image);}"."(t = Identifier())"="){jjtn000.addIdentifier(t.image);}
	   | (Interval()((ThenRelationalOperator())|(ThenInclusiveOperator())))))ThenExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Program()          : {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
        try {
/*@egen*/
	[VariableDeclaration()]
	[FactDeclaration()]
	RuleDeclaration()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}