/* Generated By:JJTree: Do not edit this line. ASTIfExpression.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package br.ufal.tci.JJTREE;

import br.ufal.tci.InferenceEngine.InferenceEngine;
import br.ufal.tci.exception.SemanticException;
import br.ufal.tci.expression.IfExpression;
import br.ufal.tci.factor.IfFactor;
import br.ufal.tci.logger.LoggerGenerator;
import br.ufal.tci.parser.Body;
import br.ufal.tci.tmp.IfLocalAttribution;

public class ASTIfExpression extends SimpleNode {
	public ASTIfExpression(int id) {
		super(id);
	}

	public ASTIfExpression(Parser_1 p, int id) {
		super(p, id);
	}

	/** Accept the visitor. **/
	public Object jjtAccept(Parser_1Visitor visitor, Object data,
			InferenceEngine engine) throws SemanticException {
		LoggerGenerator.debug("Visitando " + this.getClass().getCanonicalName());
		if (data instanceof Body) {
			Body body = (Body) data;
			IfExpression expression = new IfExpression();
			expression = (IfExpression) visitor.visit(this, expression, engine);

			body.setExpression(expression);

			return body;

		} else if (data instanceof IfExpression) {

			IfExpression expression = (IfExpression) data;
			IfExpression otherExpression = new IfExpression();
			otherExpression = (IfExpression) visitor.visit(this,
					otherExpression, engine);

			expression.setExpression(otherExpression);

			return expression;

		} else if (data instanceof IfLocalAttribution) {
			IfLocalAttribution attribution = (IfLocalAttribution) data;
			IfExpression expression = new IfExpression();
			expression = (IfExpression) visitor.visit(this, expression, engine);

			attribution.setExpression(expression, engine);

			return attribution;

		} else if (data instanceof IfFactor) {
			IfFactor factor = (IfFactor) data;
			IfExpression expression = new IfExpression();
			expression = (IfExpression) visitor.visit(this, expression, engine);

			factor.setExpression(expression);

			return factor;
		}

		return visitor.visit(this, data, engine);
	}
}
/*
 * JavaCC - OriginalChecksum=1960bdfcb2c9294759b9fefae0be3ac5 (do not edit this
 * line)
 */
