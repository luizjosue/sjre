/* Generated By:JJTree: Do not edit this line. ASTConstant.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package br.ufal.tci.JJTREE;

import br.ufal.tci.InferenceEngine.InferenceEngineIF;
import br.ufal.tci.exception.SemanticException;
import br.ufal.tci.factor.IfFactor;
import br.ufal.tci.factor.ThenFactor;
import br.ufal.tci.logger.LoggerGenerator;
import br.ufal.tci.parser.Constant;
import br.ufal.tci.type.BooleanType;
import br.ufal.tci.type.IntegerType;
import br.ufal.tci.type.RealType;
import br.ufal.tci.type.StringType;
import br.ufal.tci.value.Value;

public class ASTConstant extends SimpleNode {
	public ASTConstant(int id) {
		super(id);
	}

	public ASTConstant(Parser_1 p, int id) {
		super(p, id);
	}

	/** Accept the visitor. **/
	public Object jjtAccept(Parser_1Visitor visitor, Object data,
			InferenceEngineIF engine) throws SemanticException {
		LoggerGenerator
				.debug("Visitando " + this.getClass().getCanonicalName());
		if (data instanceof ThenFactor) {
			ThenFactor factor = (ThenFactor) data;
			Constant constant = new Constant();
			if (this.token.kind == Parser_1Constants.INTEGER_LITERAL) {
				constant.setType(new IntegerType());
				constant.setValue(new Value<Integer>(Integer
						.parseInt(this.name)));
			} else if (this.token.kind == Parser_1Constants.FLOATING_POINT_LITERAL) {
				constant.setType(new RealType());
				constant
						.setValue(new Value<Float>(Float.parseFloat(this.name)));
			} else if (this.token.kind == Parser_1Constants.STRING_LITERAL) {
				constant.setType(new StringType());
				constant.setValue(new Value<String>(this.name));
			} else if (this.token.kind == Parser_1Constants.TRUE) {
				constant.setType(new BooleanType());
				constant.setValue(new Value<Boolean>(true));
			} else if (this.token.kind == Parser_1Constants.FALSE) {
				constant.setType(new BooleanType());
				constant.setValue(new Value<Boolean>(false));
			}
			factor.setConstant(constant);
			return factor;

		} else if (data instanceof IfFactor) {

			IfFactor factor = (IfFactor) data;
			Constant constant = new Constant();
			if (this.token.kind == Parser_1Constants.INTEGER_LITERAL) {
				constant.setType(new IntegerType());
				constant.setValue(new Value<Integer>(Integer
						.parseInt(this.name)));
			} else if (this.token.kind == Parser_1Constants.FLOATING_POINT_LITERAL) {
				constant.setType(new RealType());
				constant
						.setValue(new Value<Float>(Float.parseFloat(this.name)));
			} else if (this.token.kind == Parser_1Constants.STRING_LITERAL) {
				constant.setType(new StringType());
				constant.setValue(new Value<String>(this.name));
			} else if (this.token.kind == Parser_1Constants.TRUE) {
				constant.setType(new BooleanType());
				constant.setValue(new Value<Boolean>(true));
			} else if (this.token.kind == Parser_1Constants.FALSE) {
				constant.setType(new BooleanType());
				constant.setValue(new Value<Boolean>(false));
			}
			factor.setConstant(constant);
			return factor;
		}

		return visitor.visit(this, data, engine);
	}
}
/*
 * JavaCC - OriginalChecksum=57a8dbced285e14ee1205a692588806a (do not edit this
 * line)
 */
