/* Generated By:JJTree: Do not edit this line. ASTType.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package br.ufal.tci.JJTREE;

import br.ufal.tci.InferenceEngine.InferenceEngineIF;
import br.ufal.tci.exception.SemanticException;
import br.ufal.tci.logger.LoggerGenerator;
import br.ufal.tci.parser.VariableList;
import br.ufal.tci.type.BooleanType;
import br.ufal.tci.type.IntegerType;
import br.ufal.tci.type.ObjectType;
import br.ufal.tci.type.RealType;
import br.ufal.tci.type.StringType;
import br.ufal.tci.type.Type;

public class ASTType extends SimpleNode {
	public ASTType(int id) {
		super(id);
	}

	public ASTType(Parser_1 p, int id) {
		super(p, id);
	}

	/** Accept the visitor. **/
	public Object jjtAccept(Parser_1Visitor visitor, Object data,
			InferenceEngineIF engine) throws SemanticException {
		LoggerGenerator.debug("Visitando " + this.getClass().getCanonicalName());
		if (data instanceof VariableList) {
			Type type = new Type();
			VariableList variableList = new VariableList();

			if (this.name.equalsIgnoreCase("string")) {
				type = new StringType();
			} else if (this.name.equalsIgnoreCase("int")) {
				type = new IntegerType();
			} else if (this.name.equalsIgnoreCase("real")) {
				type = new RealType();
			} else if (this.name.equalsIgnoreCase("object")) {
				type = new ObjectType();
			} else if (this.name.equalsIgnoreCase("boolean")) {
				type = new BooleanType();
			}

			variableList = (VariableList) data;

			variableList.setType(type);

			return variableList;
		}
		return visitor.visit(this, data, engine);
	}
}
/*
 * JavaCC - OriginalChecksum=81852ee8242c7a4c74c9a38c6e8d52cd (do not edit this
 * line)
 */
