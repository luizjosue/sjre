/* Generated By:JJTree: Do not edit this line. ASTThenFactor.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package br.ufal.tci.JJTREE;

import br.ufal.tci.InferenceEngine.InferenceEngine;
import br.ufal.tci.exception.SemanticException;
import br.ufal.tci.factor.ThenFactor;
import br.ufal.tci.logger.LoggerGenerator;
import br.ufal.tci.term.ThenMoreTerms;
import br.ufal.tci.term.ThenTerm;

public class ASTThenFactor extends SimpleNode {
	public ASTThenFactor(int id) {
		super(id);
	}

	public ASTThenFactor(Parser_1 p, int id) {
		super(p, id);
	}

	/** Accept the visitor. **/
	public Object jjtAccept(Parser_1Visitor visitor, Object data,
			InferenceEngine engine) throws SemanticException {
		LoggerGenerator.debug("Visitando " + this.getClass().getCanonicalName());
		if (data instanceof ThenTerm) {
			ThenTerm term = (ThenTerm) data;
			ThenFactor factor = new ThenFactor();
			factor = (ThenFactor) visitor.visit(this, factor, engine);

			term.setThenFactor(factor);

			return term;

		} else if (data instanceof ThenMoreTerms) {
			ThenMoreTerms terms = (ThenMoreTerms) data;
			ThenFactor factor = new ThenFactor();
			factor = (ThenFactor) visitor.visit(this, factor, engine);

			terms.setFactor(factor);

			return terms;

		} else if (data instanceof ThenFactor) {
			ThenFactor factor = (ThenFactor) data;
			ThenFactor newFactor = new ThenFactor();
			newFactor = (ThenFactor) visitor.visit(this, newFactor, engine);

			factor.setThenFacor(newFactor);

			return factor;
		}

		return visitor.visit(this, data, engine);
	}
}
/*
 * JavaCC - OriginalChecksum=03842a3692e3070b8c2e76f0a2d029ee (do not edit this
 * line)
 */
